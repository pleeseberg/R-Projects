# Plot NRC Sentiment Time Series
# Aggregate sentiment counts over time
textSentimentTimeSeries <- textClean_ws %>%
tidytext::unnest_tokens(word, text) %>%
dplyr::inner_join(get_sentiments("nrc"), by = "word") %>%
dplyr::group_by(date, sentiment) %>%
dplyr::count(sentiment) %>%
# Plot NRC Sentiment Time Series
# Aggregate sentiment counts over time
textSentimentTimeSeries <- textClean_ws %>%
tidytext::unnest_tokens(word, text) %>%
dplyr::inner_join(get_sentiments("nrc"), by = "word") %>%
dplyr::group_by(date, sentiment) %>%
dplyr::count(sentiment) %>%
# Plot NRC Sentiment Time Series
# Aggregate sentiment counts over time
textSentimentTimeSeries <- textClean_ws %>%
tidytext::unnest_tokens(word, text) %>%
dplyr::inner_join(get_sentiments("nrc"), by = "word") %>%
dplyr::group_by(date, sentiment) %>%
dplyr::count(sentiment) %>%
# Plot NRC Sentiment Barchart
textSentiment %>%
ggplot(aes(x = reorder(sentiment, n), y = n, fill = sentiment)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "NRC Sentiment Distribution", x = "Sentiment", y = "Count") +
theme_minimal()
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
# Save sentiment time series plot to file
ggsave(filename = "~/Downloads/R-Projects/sentiment_time_series.png", plot = sentimentTimeSeriesPlot, width = 12, height = 8)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
sentimentTimeSeriesPlot <- ggplot(textSentimentDate, aes(x = date, y = score, color = sentiment)) +
geom_line() +
labs(title = "Sentiment Over Time", x = "Date", y = "Score") +
theme_minimal(base_size = 15) +
theme(panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
text = element_text(color = "black"),
axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
legend.background = element_rect(fill = "white"),
legend.text = element_text(color = "black"),
legend.title = element_text(color = "black"))
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
# Load Necessary Packages
library(tidyverse)
library(SnowballC)
library(tidytext)
# Clear environment to avoid unexpected outputs
rm(list = ls())
# Load and Prepare Data
textDataAll <- read.csv("~/Downloads/R-Projects/AMZN-tweets.csv", row.names = NULL)
# Add a description column and prepare datetime
textDataAll <- textDataAll %>%
mutate(
desc = "AMZN",
datetime = as.POSIXct(datetime, format="%m/%d/%y %H:%M", tz="America/New_York"),
date = as.Date(datetime)
)
# Step 1: Randomly Select 5 Tweets
set.seed(123)  # For reproducibility
sampled_tweets <- textDataAll %>%
sample_n(5) %>%
select(id, text, datetime, user) %>%
filter(!is.na(text) & text != "")
# Print tweets before cleaning
cat("Tweets before cleaning:\n")
print(sampled_tweets)
# Function to check if a tweet has meaningful content
has_meaningful_content <- function(text) {
words <- str_extract_all(text, "\\b\\w+\\b")[[1]]
return(length(words) > 0)
}
# Filter out tweets with non-meaningful content
sampled_tweets <- sampled_tweets %>%
filter(sapply(text, has_meaningful_content))
# Print tweets before cleaning after filtering for meaningful content
cat("Tweets before cleaning (with meaningful content):\n")
print(sampled_tweets)
# Text Cleaning (only on the sampled tweets)
clean_sampled_tweets <- sampled_tweets %>%
mutate(text = tolower(text)) %>%
mutate(text = str_remove_all(text, "http[^[:space:]]*")) %>%
mutate(text = str_remove_all(text, "<.*?>")) %>%
mutate(text = str_remove_all(text, "[^\x01-\x7F]")) %>%
mutate(text = str_remove_all(text, '[[:punct:]]')) %>%
mutate(text = str_remove_all(text, "[^a-zA-Z0-9 ]")) %>%
mutate(text = str_remove_all(text, '\\b\\w{1,3}\\b')) %>%
mutate(text = str_remove_all(text, '\\b\\w{15,35}\\b')) %>%
mutate(text = SnowballC::wordStem(text)) %>%
mutate(text = str_squish(text)) %>%
filter(!is.na(text) & text != "")
# Print tweets after cleaning
cat("Tweets after cleaning:\n")
print(clean_sampled_tweets)
# Text Analysis (only on the cleaned sampled tweets)
textWords <- clean_sampled_tweets %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word")
unigramsCount <- textWords %>%
count(word, sort = TRUE) %>%
arrange(desc(n))
# Define ticker symbols and terms to exclude
exclude_words <- tolower(c("amzn", "tsla", "aapl", "msft", "nvda", "nflx",
"googl", "goog", "twtr", "baba", "shop", "sp",
"fb", "intc", "stock", "stocks", "market"))
filtered_wordcloudData <- unigramsCount %>%
filter(!word %in% exclude_words, n > 5)
# Print filtered top 20 words
top_20_filtered_words <- filtered_wordcloudData %>%
top_n(20, n)
cat("Top 20 filtered words:\n")
print(top_20_filtered_words)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
source("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
debugSource("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
debugSource("~/Downloads/R-Projects/R-Projects.R", echo=TRUE)
